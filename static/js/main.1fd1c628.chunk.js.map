{"version":3,"sources":["TestComponent.js","App.js","serviceWorker.js","index.js"],"names":["TestComponent","props","state","test","this","placeData","place_id","React","Component","App","componentDidMount","console","log","axios","then","res","lat","data","latitude","lng","longitude","setState","userLocation","setQuery","query","handleAutocompleteSelect","a","async","geocodeByAddress","results","getLatLng","coordinates","onMarkerClick","marker","event","selectedMarker","showWindow","onInfoWindowClose","clickMap","mapProps","map","clickEvent","placeId","center","google","initialCenter","zoom","clickableIcons","onClick","position","name","visible","onClose","formatted_address","href","target","className","value","onChange","onSelect","getInputProps","suggestions","getSuggestionItemProps","loading","style","height","width","fontSize","placeholder","suggestion","active","backgroundColor","cursor","description","GoogleApiWrapper","apiKey","process","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6UAoBeA,E,YAjBX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,MAAM,GAHK,E,sEAQf,OACI,6BACI,8CACA,2BAAIC,KAAKH,MAAMI,UAAUC,e,GAZbC,IAAMC,W,iBCM5BC,E,YACN,aAAe,IAAD,8BACZ,+CAeFC,kBAAoB,WAClBC,QAAQC,IAAI,cACZC,IAAM,0BACHC,MAAK,SAAAC,GACJJ,QAAQC,IAAIG,GACZ,IAAMC,EAAMD,EAAIE,KAAKC,SACfC,EAAMJ,EAAIE,KAAKG,UACrB,EAAKC,SAAS,CAAEC,aAAc,CAAEN,MAAKG,aAvB7B,EA4BdI,SAAW,SAAAC,GACT,EAAKH,SAAS,CAAEG,WA7BJ,EAmCdC,yBAA2B,SAAMD,GAAN,iBAAAE,EAAAC,OAAA,kEAAAD,EAAA,MACHE,2BAAiBJ,IADd,cACnBK,EADmB,kBAAAH,EAAA,MAECI,oBAAUD,EAAQ,KAFnB,OAEnBE,EAFmB,OAGzB,EAAKV,SAAS,CAAEU,gBAChB,EAAKV,SAAS,CAAEhB,UAAWwB,EAAQ,KAJV,sCAnCb,EA4CdG,cAAgB,SAAC/B,EAAOgC,EAAQC,GAC9B,EAAKb,SAAS,CAAEc,eAAgBF,IAChC,EAAKZ,SAAS,CAAEe,YAAY,KA9ChB,EAkDdC,kBAAoB,WAClB,EAAKhB,SAAS,CAAEe,YAAY,KAnDhB,EAuDdE,SAAW,SAACC,EAAUC,EAAKC,GACzB9B,QAAQC,IAAI,eACZD,QAAQC,IAAI6B,GACZ9B,QAAQC,IAAI6B,EAAWC,UAxDvB,EAAKxC,MAAQ,CACXyC,OAAQ,GACRZ,YAAa,CACXf,IAAK,KACLG,IAAK,MAEPK,MAAO,GACPW,eAAgB,KAChB9B,UAAW,GACX+B,YAAY,EACZd,aAAc,MAZJ,E,sEA8DZ,IAAMkB,EACJ,kBAAC,MAAD,CAAKI,OAAQxC,KAAKH,MAAM2C,OAClBD,OAAQvC,KAAKF,MAAM6B,YACnBc,cAAezC,KAAKF,MAAMoB,aAC1BwB,KAAM,GACNC,gBAAgB,EAChBC,QAAS5C,KAAKkC,UAGlB,kBAAC,SAAD,CAAQU,QAAS5C,KAAK4B,cACdiB,SAAU7C,KAAKF,MAAM6B,YACrBmB,KAAM,qBAGd,kBAAC,aAAD,CAAYjB,OAAQ7B,KAAKF,MAAMiC,eACnBc,SAAU7C,KAAKF,MAAM6B,YACrBoB,QAAS/C,KAAKF,MAAMkC,WACpBgB,QAAShD,KAAKiC,mBAEtB,6BACE,4BAAKjC,KAAKF,MAAMsB,OAChB,2BAAIpB,KAAKF,MAAMG,UAAUgD,mBACzB,uBAAGC,KAAM,uEAAwEC,OAAQ,UACvF,oEAEF,kBAAC,EAAD,CAAelD,UAAWD,KAAKF,MAAMG,eAM/C,OACE,yBAAKmD,UAAU,OACb,kBAAC,IAAD,CACEC,MAAOrD,KAAKF,MAAMsB,MAClBkC,SAAUtD,KAAKmB,SACfoC,SAAUvD,KAAKqB,2BAEd,gBAAGmC,EAAH,EAAGA,cAAeC,EAAlB,EAAkBA,YAAaC,EAA/B,EAA+BA,uBAAwBC,EAAvD,EAAuDA,QAAvD,OACD,6BACE,yCACEC,MAAO,CAAEC,OAAQ,OAAQC,MAAO,OAAQC,SAAU,SAC9CP,EAAc,CAChBQ,YAAa,oBACbZ,UAAW,4BAGf,yBAAKA,UAAU,mCACZO,GAAW,2CACXF,EAAYrB,KAAI,SAAA6B,GACf,IAAMb,EAAYa,EAAWC,OACzB,0BACA,kBAEEN,EAAQK,EAAWC,OACrB,CAAEC,gBAAiB,UAAWC,OAAQ,WACtC,CAAED,gBAAiB,UAAWC,OAAQ,WAC1C,OACE,wBACMV,EAAuBO,EAAY,CACrCb,YACAQ,UAGF,8BAAOK,EAAWI,sBAS5BrE,KAAKF,MAAMoB,cAAgBkB,O,GAxIjBjC,IAAMC,WA+ITkE,6BAAiB,CAC9BC,OAASC,2CADIF,CAEZjE,GC7IiBoE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1E,MAAK,SAAA2E,GACjCA,EAAaC,kB","file":"static/js/main.1fd1c628.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass TestComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            test: true\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>test component</h1>\r\n                <p>{this.props.placeData.place_id}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TestComponent","import React from 'react';\r\nimport './App.css';\r\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react'\r\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete'\r\nimport TestComponent from './TestComponent'\r\n\r\nimport axios from 'axios'\r\n\r\nclass App extends React.Component {\r\nconstructor() {\r\n  super()\r\n  this.state = {\r\n    center: '',\r\n    coordinates: {\r\n      lat: null,\r\n      lng: null\r\n    },\r\n    query: '',\r\n    selectedMarker: null,\r\n    placeData: '',\r\n    showWindow: false,\r\n    userLocation: null\r\n  }\r\n}\r\n\r\ncomponentDidMount = () => {\r\n  console.log('loaded app')\r\n  axios('https://ipapi.co/json/')\r\n    .then(res => {\r\n      console.log(res)\r\n      const lat = res.data.latitude\r\n      const lng = res.data.longitude\r\n      this.setState({ userLocation: { lat, lng } })\r\n    })\r\n}\r\n\r\n// set query to find Place data\r\nsetQuery = query => {\r\n  this.setState({ query })\r\n}\r\n\r\n// send query to find Place data\r\n  // use Place data to get coordinates\r\n  // update state with coordinates and Place data\r\nhandleAutocompleteSelect = async query => {\r\n  const results = await geocodeByAddress(query)\r\n  const coordinates = await getLatLng(results[0])\r\n  this.setState({ coordinates })\r\n  this.setState({ placeData: results[0] })\r\n}\r\n\r\n// set Marker data to state and show InfoWindow\r\n  // InfoWindow will display data from Marker state\r\nonMarkerClick = (props, marker, event) => {\r\n  this.setState({ selectedMarker: marker })\r\n  this.setState({ showWindow: true })\r\n}\r\n\r\n// close InfoWindow\r\nonInfoWindowClose = () => {\r\n  this.setState({ showWindow: false })\r\n}\r\n\r\n// handles Map click events\r\nclickMap = (mapProps, map, clickEvent) => {\r\n  console.log('clicked map')\r\n  console.log(clickEvent)\r\n  console.log(clickEvent.placeId)\r\n}\r\n\r\nrender() {\r\n  const map = (\r\n    <Map google={this.props.google}\r\n          center={this.state.coordinates}\r\n          initialCenter={this.state.userLocation}\r\n          zoom={14}\r\n          clickableIcons={true}\r\n          onClick={this.clickMap}\r\n    >\r\n\r\n      <Marker onClick={this.onMarkerClick}\r\n              position={this.state.coordinates}\r\n              name={'Current location'}\r\n      />\r\n\r\n      <InfoWindow marker={this.state.selectedMarker}\r\n                  position={this.state.coordinates}\r\n                  visible={this.state.showWindow}\r\n                  onClose={this.onInfoWindowClose}\r\n      >\r\n          <div>\r\n            <h1>{this.state.query}</h1>\r\n            <p>{this.state.placeData.formatted_address}</p>\r\n            <a href={'https://developers.google.com/maps/documentation/javascript/tutorial'} target={'_blank'}>\r\n              <button>display link to create a review</button>\r\n            </a>\r\n            <TestComponent placeData={this.state.placeData} />\r\n          </div>\r\n      </InfoWindow>\r\n    </Map>\r\n  )\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <PlacesAutocomplete\r\n        value={this.state.query}\r\n        onChange={this.setQuery}\r\n        onSelect={this.handleAutocompleteSelect}\r\n      >\r\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n        <div>\r\n          <input\r\n            style={{ height: '40px', width: '100%', fontSize: '16px' }}\r\n            {...getInputProps({\r\n              placeholder: 'Search Places ...',\r\n              className: 'location-search-input',\r\n            })}\r\n          />\r\n          <div className=\"autocomplete-dropdown-container\">\r\n            {loading && <div>Loading...</div>}\r\n            {suggestions.map(suggestion => {\r\n              const className = suggestion.active\r\n                ? 'suggestion-item--active'\r\n                : 'suggestion-item';\r\n              // inline style for demonstration purpose\r\n              const style = suggestion.active\r\n                ? { backgroundColor: '#fafafa', cursor: 'pointer' }\r\n                : { backgroundColor: '#ffffff', cursor: 'pointer' };\r\n              return (\r\n                <div\r\n                  {...getSuggestionItemProps(suggestion, {\r\n                    className,\r\n                    style,\r\n                  })}\r\n                >\r\n                  <span>{suggestion.description}</span>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      )}\r\n      </PlacesAutocomplete>\r\n      \r\n      {(this.state.userLocation && map)}\r\n      \r\n    </div>\r\n  )\r\n}\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: (process.env.REACT_APP_GOOGLE_API_KEY)\r\n})(App)\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}