{"version":3,"sources":["TestComponent.js","App.js","serviceWorker.js","index.js"],"names":["TestComponent","props","state","test","this","placeData","place_id","React","Component","App","componentDidMount","console","log","setQuery","query","setState","handleAutocompleteSelect","a","async","geocodeByAddress","results","getLatLng","coordinates","onMarkerClick","marker","event","selectedMarker","showWindow","onInfoWindowClose","clickMap","mapProps","map","clickEvent","placeId","center","lat","lng","userLocation","className","value","onChange","onSelect","getInputProps","suggestions","getSuggestionItemProps","loading","style","height","width","fontSize","placeholder","suggestion","active","backgroundColor","cursor","description","google","initialCenter","zoom","clickableIcons","onClick","position","name","visible","onClose","formatted_address","href","target","GoogleApiWrapper","apiKey","process","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.79ee4c0d.chunk.js","sourcesContent":["import React from 'react'\n\nclass TestComponent extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            test: true\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>test component</h1>\n                <p>{this.props.placeData.place_id}</p>\n            </div>\n        )\n    }\n}\n\nexport default TestComponent","import React from 'react';\nimport './App.css';\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react'\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete'\nimport TestComponent from './TestComponent'\n\nclass App extends React.Component {\nconstructor() {\n  super()\n  this.state = {\n    center: '',\n    coordinates: {\n      lat: null,\n      lng: null\n    },\n    query: '',\n    selectedMarker: null,\n    placeData: '',\n    showWindow: false,\n    userLocation: { lat: 42.3601, lng: -71.0589}\n  }\n}\n\ncomponentDidMount = () => {\n  console.log('loaded app')\n//   google.maps.event.addListener(balloon, 'click', function() {\n//     infowindow.open(map,image_balloon);\n// });\n}\n\n// set query to find Place data\nsetQuery = query => {\n  this.setState({ query })\n}\n\n// send query to find Place data\n  // use Place data to get coordinates\n  // update state with coordinates and Place data\nhandleAutocompleteSelect = async query => {\n  const results = await geocodeByAddress(query)\n  const coordinates = await getLatLng(results[0])\n  this.setState({ coordinates })\n  this.setState({ placeData: results[0] })\n}\n\n// set Marker data to state and show InfoWindow\n  // InfoWindow will display data from Marker state\nonMarkerClick = (props, marker, event) => {\n  this.setState({ selectedMarker: marker })\n  this.setState({ showWindow: true })\n}\n\n// close InfoWindow\nonInfoWindowClose = () => {\n  this.setState({ showWindow: false })\n}\n\n// handles Map click events\nclickMap = (mapProps, map, clickEvent) => {\n  console.log('clicked map')\n  console.log(clickEvent)\n  console.log(clickEvent.placeId)\n}\n\nrender() {\n  return (\n    <div className=\"App\">\n        <PlacesAutocomplete\n          value={this.state.query}\n          onChange={this.setQuery}\n          onSelect={this.handleAutocompleteSelect}\n        >\n          {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n          <div>\n            <input\n              style={{ height: '40px', width: '100%', fontSize: '16px' }}\n              {...getInputProps({\n                placeholder: 'Search Places ...',\n                className: 'location-search-input',\n              })}\n            />\n            <div className=\"autocomplete-dropdown-container\">\n              {loading && <div>Loading...</div>}\n              {suggestions.map(suggestion => {\n                const className = suggestion.active\n                  ? 'suggestion-item--active'\n                  : 'suggestion-item';\n                // inline style for demonstration purpose\n                const style = suggestion.active\n                  ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                  : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                return (\n                  <div\n                    {...getSuggestionItemProps(suggestion, {\n                      className,\n                      style,\n                    })}\n                  >\n                    <span>{suggestion.description}</span>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n        </PlacesAutocomplete>\n\n        <Map google={this.props.google}\n             center={this.state.coordinates}\n             initialCenter={this.state.userLocation}\n             zoom={14}\n             clickableIcons={true}\n             onClick={this.clickMap}\n        >\n\n          <Marker onClick={this.onMarkerClick}\n                  position={this.state.coordinates}\n                  name={'Current location'}\n          />\n\n          <InfoWindow marker={this.state.selectedMarker}\n                      position={this.state.coordinates}\n                      visible={this.state.showWindow}\n                      onClose={this.onInfoWindowClose}\n          >\n              <div>\n                <h1>{this.state.query}</h1>\n                <p>{this.state.placeData.formatted_address}</p>\n                <a href={'https://developers.google.com/maps/documentation/javascript/tutorial'} target={'_blank'}>\n                  <button>display link to create a review</button>\n                </a>\n                <TestComponent placeData={this.state.placeData} />\n              </div>\n          </InfoWindow>\n        </Map>\n    </div>\n  )\n}\n}\n\nexport default GoogleApiWrapper({\n  apiKey: (process.env.REACT_APP_GOOGLE_API_KEY)\n})(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}